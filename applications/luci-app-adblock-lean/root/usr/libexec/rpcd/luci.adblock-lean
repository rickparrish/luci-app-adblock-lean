#!/bin/sh

# TechRef: https://openwrt.org/docs/techref/rpcd
# TESTS
# ubus -v list luci.adblock-lean
# ubus -v call luci.adblock-lean getStatus
# ubus -v call luci.adblock-lean installAbl

# Exported variables for when adblock-lean is called via a service command isntead of sourced (eg during install)
export luci_preset=auto		# When gen_config is called, use the recommended preset
export luci_skip_dialogs=1	# Ensure adblock-lean never shows a dialog/prompt for the user

# Global variables coming from adblock-lean
luci_bad_conf_format=-1		# 1 = Current config format is older than default config version
luci_conf_fixes=""			# \n separated list of necessary config fixes
luci_curr_config_format=-1	# Config format read from the config file
luci_def_config_format=-1	# Config format supported by adblock-lean
luci_dnsmasq_status=-1		# 0 = Running, 1 = Not running, 2 = Test lookup failed, 3 = Test lookup returned 0.0.0.0
luci_errors=""				# Error messages passed in call to reg_failure()
luci_good_line_count=-1		# Total number of unique lines in the merged blocklist
luci_legacy_entries=""		# \n separated list of config entries that aren't double-quoted
luci_missing_entries=""		# \n separated list of entries that aren't in the config file (and should be added)
luci_missing_keys=""		# \n separated list of keys that aren't in the config file (and should be added)
luci_pid_action=""			# Other (locking) action currently being performed (blocklist_status_rpc should be 2 for this to have a value)
luci_unexp_entries=""		# \n separated list of config entries that are no longer used (and should be removed)
luci_unexp_keys=""			# \n separated list of config keys that are no longer used (and should be removed)
luci_upd_config_format=-1   # Config format supported by adblock-lean update (when luci_update_status=1)
luci_update_status=-1		# 0 = Up-to-date, 1 = Update available, 2 = Error checking

# Global variables defined by adblock-lean setup() API
## Directive variables
luci_use_old_config=""		# Setting this variable will make setup() load and re-use existing config if it exists (skips gen_config)
luci_install_packages=""	# Whitespace-separated list of utils to install, where util can be: <sed|sort|awk>
							# If set, only missing packages are installed. If not set, packages installation is skipped.

## Feedback variables defined by adblock-lean setup() API
## setup() will set these to '1' and later unset when corresponding action succeeds
luci_addnmount_failed=""
luci_service_enable_failed=""
luci_pkgs_install_failed=""
luci_cron_job_creation_failed=""

# Global variables set in this RPC script
blocklist_age_s_rpc=-1		# Number of seconds since the blocklist was last modified
blocklist_status_rpc=-1		# 0 = Active, 1 = Locking error, 2 = Other action being performed, 3 = Paused, 4 = Not active
config_status_rpc=-1		# 0 = OK, 1 = Manual fix or reset needed, 2 = Update needed (auto or manual)
luci_app_package_info=""	# Result of opk info luci-app-adblock-lean, which includes version information used to detect updates
service_status_rpc=-1		# 0 = Enabled, 1 = Disabled, 2 = Not installed

# Source the adblock-lean script if it exists, or set service_status_rpc to 2=Not installed if it doesn't exist
adblockLeanFilename="/etc/init.d/adblock-lean"
if [ -s "$adblockLeanFilename" ]; then
	. "$adblockLeanFilename"
	command -v detect_utils 1>/dev/null && detect_utils -n # this will avoid erroring out with earlier adblock-lean versions which do not have detect_utils()
else
	service_status_rpc=2
fi

# source jshn shell library
. /usr/share/libubox/jshn.sh

# RPC scripts must output a JSON payload, so ensure msgs_dest is set to /dev/null (adblock-lean will do this for actual
# RPC calls, but it won't do it when testing the RPC script via the CLI, hence why we set it here)
msgs_dest="/dev/null"

# adblock-lean will call this function before exiting, so for example the flow for a getStatus call looks like:
# RPC call getStatus -> get_status_rpc() -> status() -> abl_luci_exit() -> get_status_rpc(status result) -> exit
abl_luci_exit() {
	case "$exit_action" in
		getStatus)
			get_status_rpc "$1"
			;;
	esac
}

# Call adblock-lean's parse_config() function to determine whether the config file needs updating
check_config_rpc() {
	# If adblock-lean is installed, then we want to call its parse_config method
	if [ "$service_status_rpc" != 2 ]
	then
		parse_config "/etc/adblock-lean/config"
		config_status_rpc="$?"
	fi

	# Unlike status(), parse_config() does not exit at the end, so we can return our json payload from here
	# Return a json response
	json_init
	json_add_string "bad_conf_format" "$luci_bad_conf_format"
	json_add_string "conf_fixes" "$luci_conf_fixes"
	json_add_string "curr_config_format" "$luci_curr_config_format"
	json_add_string "def_config_format" "$luci_def_config_format"
	json_add_string "legacy_entries" "$luci_legacy_entries"
	json_add_string "missing_entries" "$luci_missing_entries"
	json_add_string "missing_keys" "$luci_missing_keys"
	json_add_string "unexp_entries" "$luci_unexp_entries"
	json_add_string "unexp_keys" "$luci_unexp_keys"
	json_add_string "config_status" "$config_status_rpc"
	json_dump
}

# Call adblock-lean's status() function to determine whether the blocklist is active, whether dnsmasq is functioning
# correctly, etc.  Initial call will not have an argument, so status() will be called.  But status() will not return,
# and instead when it completes abl_luci_exit() will be called, which in turn will re-call this method with the status
# result as an argument.  On this second call the status() call will be skipped, so then it can print the result json.
get_status_rpc() {
	# Call status() if we weren't passed any arguments
	if [ "$service_status_rpc" != 2 ]
	then
		if [ -z "$1" ]
		then
			status
		fi

		# We already called status in the get_status_rpc() method, so now we just need to grab the return value, which is passed
		# in as an arg to the print_status_rpc() function
		blocklist_status_rpc="$1"

		# Get additional details if the dnsmasq checks passed
		if [ "$luci_dnsmasq_status" = 0 ]
		then
			# luci_good_line_count will be something like "774775 /tmp/dnsmasq.d/blocklist," and we just want the line count
			luci_good_line_count=$(echo "$luci_good_line_count" | awk '{print $1;}')

			# Get the seconds since the blocklist was last modified, so we can tell if the scheduled task is running correctly
			blocklist_age_s_rpc=$(($(date +%s) - $(date -r "${DNSMASQ_CONF_D}/.abl-blocklist.gz" +%s 2>/dev/null || date -r "${DNSMASQ_CONF_D}/abl-blocklist" +%s 2>/dev/null)))
		fi

		# get enabled/disabled status
		case $(service 2>/dev/null | grep "adblock-lean") in 
			*disabled*)
				service_status_rpc=1
				;;
			*enabled*)
				service_status_rpc=0
				;;
		esac
	fi

	# Get luci-app-adblock-lean info
	luci_app_package_info=$(opkg info luci-app-adblock-lean)

	# Return a json response
	json_init
	json_add_int "service_status" "$service_status_rpc"
	json_add_int "dnsmasq_status" "$luci_dnsmasq_status"
	json_add_int "blocklist_status" "$blocklist_status_rpc"
	json_add_int "blocklist_line_count" "$luci_good_line_count"
	json_add_int "blocklist_age_s" "$blocklist_age_s_rpc"
	json_add_int "update_status" "$luci_update_status"
	json_add_int "update_config_format" "$luci_upd_config_format"
	json_add_string "pid_action" "$luci_pid_action"
	json_add_string "errors" "$luci_errors"
	json_add_string "luci_app_package_info" "$luci_app_package_info"
	json_dump
}

install_abl_rpc() {
	luci_preset="$1"			# mini, small, medium, or large, passed in from luci
	luci_install_packages="$2" 	# whitepsace-separated list of utils to install is passed in from luci

	uclient-fetch https://raw.githubusercontent.com/lynxthecat/adblock-lean/main/adblock-lean \
		-O /tmp/adblock-lean-latest 1> /dev/null 2> /tmp/adblock-lean-fetch.err
	if grep -q "Download completed" "/tmp/adblock-lean-fetch.err" &&
			mv /tmp/adblock-lean-latest "$adblockLeanFilename"; then
		if . "$adblockLeanFilename"; then
			setup
			install_abl_result=$?

			# Optionally use following variables to check which setup actions failed:
			# $luci_addnmount_failed
			# $luci_service_enable_failed
			# $luci_pkgs_install_failed
			# $luci_cron_job_creation_failed
		else
			install_abl_result=3 # this indicates error while initializing the script
		fi
	else
		install_abl_result=2 # this indicates download error
	fi
	rm -f /tmp/adblock-lean-latest /tmp/adblock-lean-fetch.err

	# Return a json response
	json_init
	json_add_int "install_abl_result" "$install_abl_result"
	json_dump
}

# Call adblock-lean's gen_config() function to reset the broken config file
reset_config_rpc() {
	# If adblock-lean is installed, then we want to call its gen_config method
	if [ "$service_status_rpc" != 2 ]
	then
		gen_config
	fi

	# Not sure if gen_config exits, but it doesn't really matter either way 
	# because luci will reload after resetConfig returns
}

# Call adblock-lean's update() function to update to the latest version
update_abl_rpc() {
	# If adblock-lean is installed, then we want to call its update method
	if [ "$service_status_rpc" != 2 ]
	then
		update
	fi

	# Not sure if update exits, but it doesn't really matter either way 
	# because luci will reload after updateConfig returns
}

# Call adblock-lean's load_config() function to update the outdated config file
update_config_rpc() {
	# If adblock-lean is installed, then we want to call its load_config method
	if [ "$service_status_rpc" != 2 ]
	then
		load_config "-f"
	fi

	# Not sure if load_config exits, but it doesn't really matter either way 
	# because luci will reload after updateConfig returns
}

# Install the luci-app-adblock-lean package from the given url
update_luci_app_rpc() {
	local url="$1"

	uclient-fetch "$url" -O "/tmp/luci-app-adblock-lean-latest.ipk" 1> /dev/null 2> "/tmp/luci-app-adblock-lean-fetch.err"
	if grep -q "Download completed" "/tmp/luci-app-adblock-lean-fetch.err"
	then
		opkg install "/tmp/luci-app-adblock-lean-latest.ipk"
		update_result="$?"
		service rpcd reload
	else
		update_result=1
	fi
	rm -f "/tmp/luci-app-adblock-lean-latest.ipk" "/tmp/luci-app-adblock-lean-fetch.err"
	
	# Return a json response
	# TODOX This response is never received by the luci app.  Maybe it's because installing the package reloads/restarts rpcd,
	#       which then interferes with the active rpc call to this function.  Worth looking into, just to see if it's workaroundable,
	#       but the important thing is the package installs, and after 20 seconds the rpc call aborts and the page reloads, so
	#       things take a little longer than they should, but they ultimately work.
	json_init
	json_add_int "update_result" "$update_result"
	json_dump
}

# Check whether this is a "list" or "call" request
case "$1" in
	list)
		printf '{\n'
		printf '	"checkConfig": { },\n'
		printf '	"getStatus": { },\n'
		printf '	"installAbl": { },\n'
		printf '	"resetConfig": { },\n'
		printf '	"updateAbl": { },\n'
		printf '	"updateConfig": { },\n'
		printf '	"updateLuciApp": { "url": "url" }\n'
		printf '}\n'
		;;
	call)
		# Store the call target for use in abl_luci_exit(), then check which
		# function to call, and call it
		exit_action="$2"
		case "$2" in
			checkConfig)
				check_config_rpc
				;;
			getStatus)
				get_status_rpc
				;;
			installAbl)
				read -r input
				json_load "$input"
				json_get_var preset 'preset'
				json_get_var utils 'utils'
				json_cleanup
				install_abl_rpc "$preset" "$utils"
				;;
			resetConfig)
				reset_config_rpc
				;;
			updateAbl)
				update_abl_rpc
				;;
			updateConfig)
				update_config_rpc
				;;
			updateLuciApp)
				read -r input
				json_load "$input"
				json_get_var url 'url'
				json_cleanup
				update_luci_app_rpc "$url"
				;;
		esac
	;;
esac
